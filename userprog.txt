diff --git a/postbuild/paths.cmd b/postbuild/paths.cmd
index 536f495..fb2e16a 100644
--- a/postbuild/paths.cmd
+++ b/postbuild/paths.cmd
@@ -73,11 +73,12 @@ goto end
 :config_DESKTOP-29S2BNN
 
 SET VOL_MOUNT_LETTER="Q:"
-SET PXE_PATH="D:\facultate\An4sem1\PSO\HAL9000\HAL9000\PXE"
+SET PATH_TO_VM_TOOLS="C:\Program Files (x86)\VMware\VMware Virtual Disk Development Kit"
+SET PATH_TO_VM_DISK="D:\facultate\An4sem1\PSO\HAL9000\HAL9000\VM\HAL9000_VM\HAL9000.vmdk"
 SET PATH_TO_VM_FILE="D:\facultate\An4sem1\PSO\HAL9000\HAL9000\VM\HAL9000_VM\HAL9000.vmx"
-SET PATH_TO_LOG_FILE="D:\facultate\An4sem1\PSO\HAL9000\HAL9000\VM\HAL9000_VM\HAL9000.log"
 SET PATH_TO_VIX_TOOLS="D:\programe\VMware.Workstation.Pro.16.2.0+VMware.Workstation.16.2.0.Player"
-SET PATH_TO_VM_DISK="D:\facultate\An4sem1\PSO\HAL9000\HAL9000\VM\HAL9000_VM\HAL9000.vmdk"
+SET PXE_PATH="D:\facultate\An4sem1\PSO\HAL9000\HAL9000\PXE"
+SET PATH_TO_LOG_FILE="D:\facultate\An4sem1\PSO\HAL9000\HAL9000\VM\HAL9000_VM\HAL9000.log"
 goto end
 
 :end
\ No newline at end of file
diff --git a/src/HAL9000/src/isr.c b/src/HAL9000/src/isr.c
index 0cccd74..14c07fd 100644
--- a/src/HAL9000/src/isr.c
+++ b/src/HAL9000/src/isr.c
@@ -143,6 +143,14 @@ _IsrExceptionHandler(
         LOG_TRACE_EXCEPTION("RSP[0]: 0x%X\n", *((QWORD*)StackPointer->Registers.Rsp));
     }
 
+    // lab05 ex 10
+    if (!GdtIsSegmentPrivileged((WORD)StackPointer->Registers.CS))
+    {
+        PPROCESS currProcess = GetCurrentProcess();
+        ProcessTerminate(currProcess);
+        exceptionHandled = TRUE;
+    }
+
     // no use in logging if we solved the problem
     if (!exceptionHandled)
     {
diff --git a/src/HAL9000/src/syscall.c b/src/HAL9000/src/syscall.c
index 1576f7f..c9bbd72 100644
--- a/src/HAL9000/src/syscall.c
+++ b/src/HAL9000/src/syscall.c
@@ -7,6 +7,7 @@
 #include "mmu.h"
 #include "process_internal.h"
 #include "dmp_cpu.h"
+#include "thread_internal.h"
 
 extern void SyscallEntry();
 
@@ -68,6 +69,19 @@ SyscallHandler(
             status = SyscallValidateInterface((SYSCALL_IF_VERSION)*pSyscallParameters);
             break;
         // STUDENT TODO: implement the rest of the syscalls
+        case SyscallIdFileWrite:
+            status = SyscallFileWrite((UM_HANDLE)pSyscallParameters[0],
+                (PVOID)pSyscallParameters[1],
+                (QWORD)pSyscallParameters[2],
+                (QWORD*)pSyscallParameters[3]);
+            break;
+        case SyscallIdProcessExit:
+            status = SyscallProcessExit((STATUS)pSyscallParameters[0]);
+            break;
+        case SyscallIdThreadExit:
+            status = SyscallThreadExit((STATUS)pSyscallParameters[0]);
+            break;
+            // STUDENT TODO: implement the rest of the syscalls
         default:
             LOG_ERROR("Unimplemented syscall called from User-space!\n");
             status = STATUS_UNSUPPORTED;
@@ -169,4 +183,43 @@ SyscallValidateInterface(
     return STATUS_SUCCESS;
 }
 
-// STUDENT TODO: implement the rest of the syscalls
\ No newline at end of file
+// STUDENT TODO: implement the rest of the syscalls
+
+STATUS
+SyscallFileWrite(
+    IN  UM_HANDLE                   FileHandle,
+    IN_READS_BYTES(BytesToWrite)
+    PVOID                           Buffer,
+    IN  QWORD                       BytesToWrite,
+    OUT QWORD* BytesWritten
+)
+{
+    if (FileHandle == UM_FILE_HANDLE_STDOUT) {
+        LOG("%s\n", Buffer);
+        *BytesWritten = BytesToWrite;
+    }
+
+    return STATUS_SUCCESS;
+}
+
+STATUS
+SyscallProcessExit(
+    IN      STATUS                  ExitStatus
+)
+{
+    UNREFERENCED_PARAMETER(ExitStatus);
+
+    ProcessTerminate(NULL);
+
+    return STATUS_SUCCESS;
+}
+
+STATUS
+SyscallThreadExit(
+    IN      STATUS                  ExitStatus
+)
+{
+    ThreadExit(ExitStatus);
+
+    return STATUS_SUCCESS;
+}
\ No newline at end of file
diff --git a/src/HAL9000/src/system.c b/src/HAL9000/src/system.c
index a3e1b9d..53b8dfa 100644
--- a/src/HAL9000/src/system.c
+++ b/src/HAL9000/src/system.c
@@ -338,6 +338,10 @@ SystemInit(
     //    LogComponentThread,
     //    TRUE
     //);
+    LogSystemInit(LogLevelTrace, // lab05, prob01
+        LogComponentUserMode,
+        TRUE
+    );
     status = SmpSendGenericIpi(_HelloIpi, NULL, NULL, NULL, TRUE);
     if (!SUCCEEDED(status))
     {
diff --git a/src/HAL9000/src/test_lp.c b/src/HAL9000/src/test_lp.c
index 88ce5ec..7e4f53e 100644
--- a/src/HAL9000/src/test_lp.c
+++ b/src/HAL9000/src/test_lp.c
@@ -64,8 +64,10 @@ STATUS MultithreadFibonacci(
 
         ThreadWaitForTermination(thread1, &exitStatus1);
         ThreadWaitForTermination(thread2, &exitStatus2);
-
         context->Result = context1.Result + context2.Result;
+        LOG("thread 1 result is: %d\n", context1.Result);
+        LOG("thread 2 result is: %d\n", context2.Result);
+        
     }
     __finally
     {
@@ -77,14 +79,16 @@ STATUS MultithreadFibonacci(
         {
             ThreadCloseHandle(thread2);
         }
+        
+        if (context->Result == 55) {
+            LOG("Test passed: Result is correct (expected 55)\n");
+            status = STATUS_SUCCESS;
+        }
+        else {
+            LOG("Test failed: Result is incorrect (expected 55, got %d)\n", context->Result);
+            status = STATUS_UNSUCCESSFUL;
+        }
     }
-    if (context->Result == 55) {
-        LOG("Test passed: Result is correct (expected 55)\n");
-        status = STATUS_SUCCESS;
-    }
-    else {
-        LOG("Test failed: Result is incorrect (expected 55, got %d)\n", context->Result);
-        status = STATUS_UNSUCCESSFUL;
-    }
+   
     return status;
 }
diff --git a/src/HAL9000/src/thread.c b/src/HAL9000/src/thread.c
index f596c89..c3c5450 100644
--- a/src/HAL9000/src/thread.c
+++ b/src/HAL9000/src/thread.c
@@ -1071,7 +1071,7 @@ _ThreadSetupMainThreadUserStack(
     ASSERT(ResultingStack != NULL);
     ASSERT(Process != NULL);
 
-    *ResultingStack = InitialStack;
+    *ResultingStack = (PVOID)PtrDiff(InitialStack, SHADOW_STACK_SIZE + sizeof(PVOID));
 
     return STATUS_SUCCESS;
 }
